---
- name: 21) Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /tmp1
    - /tmp2


- name: 22) Ensure /etc/apt/keyrings directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: 23) Add Docker GPG key
  ansible.builtin.shell: curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  args:
    creates: /etc/apt/keyrings/docker.gpg

- name: 24) Set correct permissions on Docker GPG key
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.gpg
    mode: '0644'

- name: 25) Add Docker repository
  ansible.builtin.shell:  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" > /etc/apt/sources.list.d/docker.list
  args:
    creates: /etc/apt/sources.list.d/docker.list

- name: 26) Install Docker
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
    update_cache: yes
    state: present

- name: 27) Start and enable Docker Service
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: yes
    daemon_reload: yes



- name: 28) Download cri-dockerd from GitHub using a specific version
  ansible.builtin.get_url:
    url: "https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_docker_version }}/cri-dockerd_{{ cri_docker_version }}.3-0.debian-bullseye_amd64.deb"
    dest: "/tmp1/cri-dockerd-{{ cri_docker_version }}.3-0.debian-bullseye_amd64.deb"


- name: 29) Extract the deb file
  ansible.builtin.command:
    cmd: dpkg-deb -x /tmp1/cri-dockerd-{{ cri_docker_version }}.3-0.debian-bullseye_amd64.deb /tmp2


- name: 30) Copy cri-dockerd to /usr/bin
  become: true
  ansible.builtin.copy:
    src: /tmp2/usr/bin/cri-dockerd
    dest: /usr/bin/cri-dockerd
    owner: root
    group: root
    mode: '0755'
    remote_src: yes


- name: 31) Create /etc/systemd/system/cri-docker.service
  become: true
  ansible.builtin.copy:
    src: /tmp2/lib/systemd/system/cri-docker.service
    dest: /etc/systemd/system/cri-docker.service
    owner: root
    group: root
    mode: '0644'
    remote_src: yes


- name: 32) Create /etc/systemd/system/cri-docker.socket
  become: true
  ansible.builtin.copy:
    src: /tmp2/lib/systemd/system/cri-docker.socket
    dest: /etc/systemd/system/cri-docker.socket
    owner: root
    group: root
    mode: '0644'
    remote_src: yes


- name: 33) Reload systemd
  become: true
  ansible.builtin.systemd:
    daemon_reload: yes


- name: 34) Enable cri-docker.service
  become: true
  ansible.builtin.systemd:
    name: cri-docker.service
    enabled: yes


- name: 35) Enable and start cri-docker.socket
  become: true
  ansible.builtin.systemd:
    name: cri-docker.socket
    enabled: yes
    state: started


- name: 36) Create /etc/sysctl.d/99-kubernetes-cri.conf
  become: true
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
    owner: root
    group: root
    mode: '0644'

- name: 37) Reload sysctl from all system configuration files
  ansible.builtin.command:
    cmd: sysctl --system

