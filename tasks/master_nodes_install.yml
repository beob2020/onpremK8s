---
- name: 41) Initializing Kubernetes cluster
  become: yes
  ansible.builtin.shell: |
     kubeadm init --pod-network-cidr=10.244.0.0/16  --upload-certs --kubernetes-version=v1.28.0  --control-plane-endpoint=167.235.50.166 --cri-socket unix:///var/run/cri-dockerd.sock >> cluster_initialized.txt
  args:
    executable: /bin/bash
    chdir: "{{ ansible_env.HOME }}"
    creates: cluster_initialized.txt
  register: kubeadm_result
  failed_when:
    - "'error' in kubeadm_result.stderr|lower"
    - "kubeadm_result.rc != 0"


- name: 42) Create .kube directory in /root
  become: true
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0755'


- name: 42b) Copy Kubernetes admin config to user's kubeconfig
  become: yes
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    owner: admin
    mode: '0644'
    remote_src: true


- name: 43) Set owner of kube config
  become: true
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.kube/config"
    owner: admin
    group: admin
    mode: '0600'


- name: 44) Set KUBECONFIG environment variable
  become: true
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: export KUBECONFIG=/etc/kubernetes/admin.conf
    state: present
    create: yes

- name: Read kubeconfig file
  slurp:
    src: /etc/kubernetes/admin.conf
  register: kubeconfig_content

- name: Print kubeconfig file content
  debug:
    msg: "{{ kubeconfig_content['content'] | b64decode }}"



- name: 45) Install flannel pod network
  become: true
  ansible.builtin.shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml


- name: 46) Get the token for joining the worker nodes
  become: true
  ansible.builtin.shell: kubeadm token create --print-join-command
  register: kubernetes_join_command
  changed_when: false

- debug:
    var: join_command

- name: 47) Save the join command on local machine
  copy:
    content: "{{ join_command.stdout }}"
    dest: "/tmp/k8s-cluster-setup/join_command"
  delegate_to: localhost
  when: join_command is defined and join_command.stdout is defined


- name: 48c) Generate join token for other master nodes (if multi-master)
  shell: kubeadm token create --print-join-command
  register: kubeadm_join_cmd
  delegate_to: "{{ groups['master'][0] }}"

- set_fact:
    kubeadm_join: "{{ kubeadm_join_cmd.stdout }}"

- debug: var=kubeadm_join

- name: 50) Store join command on the master for future use
  action: copy content="{{ kubeadm_join }}" dest="/etc/kubernetes/kubeadm-join.command"
